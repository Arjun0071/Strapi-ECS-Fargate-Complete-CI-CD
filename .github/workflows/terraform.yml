name: CD - Terraform Deploy Strapi

# Trigger automatically after CI workflow completes
on:
  workflow_run:
    workflows: ["CI - Build & Push Docker Image"]
    types:
      - completed
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPO: ${{ secrets.ECR_REPO }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
    
      # Step 4: Set IMAGE_TAG from CI workflow commit
      - name: Set IMAGE_TAG from CI commit
        run: |
          IMAGE_TAG=$(echo ${{ github.event.workflow_run.head_commit.id }} )
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 5: Terraform Init
      - name: Terraform Init
        working-directory: ./Terraform
        run: terraform init

      # Step 6: Terraform Plan
      - name: Terraform Plan
        working-directory: ./Terraform
        run: terraform plan -var="image_name=${{ env.ECR_REPO }}" -var="image_tag=$IMAGE_TAG" -var="aws_region=${{ env.AWS_REGION }}"

      # Step 7: Terraform Apply
      - name: Terraform Apply
        working-directory: ./Terraform
        run: terraform apply -auto-approve -var="image_name=${{ env.ECR_REPO }}" -var="image_tag=$IMAGE_TAG" -var="aws_region=${{ env.AWS_REGION }}"
